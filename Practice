//1. Создание и вывод элементов


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    println(numbers.contentToString())
}



//2. Сумма элементов массива


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    val sum = numbers.sum()
    println("Сумма элементов $sum")
}


//3. Максимальное и минимальное значение


fun main() {
    val numbers = intArrayOf(10, 5, 20, 1, 15, 8, 25, 3, 12, 7)
    val max = numbers.maxOrNull()
    val min = numbers.minOrNull()
    println("Максимальное значение $max")
    println("Минимальное значение $min")
}



//4. Сортировка массива


fun main() {
    val numbers = intArrayOf(10, 5, 20, 1, 15, 8, 25, 3, 12, 7)
    numbers.sort()
    println("Отсортированный массив ${numbers.contentToString()}")
}



//5. Уникальные элементы


fun main() {
    val numbers = intArrayOf(1, 2, 2, 3, 4, 4, 5, 1)
    val uniqueNumbers = numbers.distinct().toIntArray()
    println("Уникальные элементы ${uniqueNumbers.contentToString()}")
}



//6. Четные и нечетные числа


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    val evenNumbers = numbers.filter { it % 2 == 0 }.toIntArray()
    val oddNumbers = numbers.filter { it % 2 != 0 }.toIntArray()
    println("Четные числа ${evenNumbers.contentToString()}")
    println("Нечетные числа ${oddNumbers.contentToString()}")
}


//7. Реверс массива


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    val reversedNumbers = numbers.reversedArray()
    println("Реверсированный массив ${reversedNumbers.contentToString()}")
}



//8. Поиск элемента


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    val elementToFind = 3
    val index = numbers.indexOf(elementToFind)
    if (index != -1) {
        println("Индекс элемента $elementToFind $index")
    } else {
        println("Элемент $elementToFind не найден")
    }
}



//9. Копирование массива


fun main() {
    val originalArray = intArrayOf(1, 2, 3, 4, 5)
    val copiedArray = originalArray.copyOf()
    println("Оригинальный массив ${originalArray.contentToString()}")
    println("Скопированный массив ${copiedArray.contentToString()}")
}


//10. Сумма четных чисел


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5, 6)
    val sumOfEven = numbers.filter { it % 2 == 0 }.sum()
    println("Сумма четных чисел $sumOfEven")
}



//11. Пересечение массивов


fun main() {
    val array1 = intArrayOf(1, 2, 3, 4, 5)
    val array2 = intArrayOf(3, 5, 6, 7, 8)
    val intersection = array1.intersect(array2.toSet()).toIntArray()
    println("Пересечение массивов ${intersection.contentToString()}")
}



//12. Перестановка элементов


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    swapElements(numbers, 0, 2) 
    println(numbers.contentToString())
}
fun swapElements(arr IntArray, index1 Int, index2 Int) {
    if (index1 >= 0 && index1 < arr.size && index2 >= 0 && index2 < arr.size) {
        val temp = arr[index1]
        arr[index1] = arr[index2]
        arr[index2] = temp
    }
}



//13. Заполнение случайными числами


fun main() {
    val randomNumbers = IntArray(20) { Random.nextInt(1, 101) }
    println(randomNumbers.contentToString())
}


//14. Числа Прокопенко (делящиеся на 3)


fun main() {
    val numbers = intArrayOf(1, 3, 6, 9, 12, 15, 17, 18)
    val numbersDivisibleBy3 = numbers.filter { it % 3 == 0 }
    println(numbersDivisibleBy3.contentToString())
}



//15. Проверка на палиндром


fun main() {
    val numbers1 = intArrayOf(1, 2, 3, 2, 1)
    val numbers2 = intArrayOf(1, 2, 3, 4, 5)

    println("Is ${numbers1.contentToString()} a palindrome? ${isPalindrome(numbers1)}")
    println("Is ${numbers2.contentToString()} a palindrome? ${isPalindrome(numbers2)}")
}


fun isPalindrome(array IntArray) Boolean {
    return array.contentEquals(array.reversedArray())
}




16. Конкатенация двух массивов:


fun main() {
    val array1 = intArrayOf(1, 2, 3)
    val array2 = intArrayOf(4, 5, 6)
    val concatenatedArray = array1 + array2
    println(concatenatedArray.contentToString())
}



17. Сумма и произведение:


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    val sum = numbers.sum()
    val product = numbers.reduce { acc, i -> acc  i }
    println("Сумма: $sum, Произведение: $product")
}



18. Группировка чисел:


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
    numbers.chunked(5).forEach { println(it.contentToString()) }
}



19. Слияние двух отсортированных массивов:


fun main() {
    val arr1 = intArrayOf(1, 3, 5)
    val arr2 = intArrayOf(2, 4, 6)
    val merged = (arr1 + arr2).sortedArray()
    println(merged.contentToString())
}



20. Числовая последовательность (арифметическая прогрессия):


fun main() {
    val a = 2 // первый член
    val d = 3 // разность
    val n = 5 // количество членов
    val progression = IntArray(n) { a + it  d }
    println(progression.contentToString())
}



21. Удаление элемента:


fun removeElement(arr: IntArray, element: Int): IntArray {
    return arr.filter { it != element }.toIntArray()
}

fun main() {
    val arr = intArrayOf(1, 2, 3, 2, 4)
    val newArr = removeElement(arr, 2)
    println(newArr.contentToString())
}



22. Поиск второго максимального:


fun findSecondMax(arr: IntArray): Int? {
    if (arr.size < 2) return null
    val sorted = arr.sortedDescending()
    return sorted[1]
}

fun main() {
    val arr = intArrayOf(1, 5, 2, 8, 3)
    val secondMax = findSecondMax(arr)
    println("Второй максимальный: $secondMax")
}



23. Объединение массивов:


fun mergeArrays(vararg arrays: IntArray): IntArray {
    return arrays.flatten().toIntArray()
}

fun main() {
    val arr1 = intArrayOf(1, 2, 3)
    val arr2 = intArrayOf(4, 5)
    val arr3 = intArrayOf(6,7,8)
    val merged = mergeArrays(arr1, arr2, arr3)
    println(merged.contentToString())
}



24. Транспонирование матрицы:


fun transposeMatrix(matrix: Array<IntArray>): Array<IntArray> {
    val rows = matrix.size
    val cols = matrix[0].size
    val transposed = Array(cols) { IntArray(rows) }
    for (i in 0 until rows) {
        for (j in 0 until cols) {
            transposed[j][i] = matrix[i][j]
        }
    }
    return transposed
}

fun main() {
    val matrix = arrayOf(intArrayOf(1, 2), intArrayOf(3, 4))
    val transposed = transposeMatrix(matrix)
    transposed.forEach { println(it.contentToString()) }
}



25. Линейный поиск:


fun linearSearch(arr: IntArray, element: Int): Boolean {
    return arr.contains(element)
}

fun main() {
    val arr = intArrayOf(1, 2, 3, 4, 5)
    println(linearSearch(arr, 3)) // true
    println(linearSearch(arr, 6)) // false
}



26. Среднее арифметическое:


fun main() {
    val numbers = intArrayOf(1, 2, 3, 4, 5)
    val average = numbers.average()
    println("Среднее арифметическое: $average")
}



27. Максимальная последовательность:


fun maxSequence(arr: IntArray): Int {
    var maxCount = 0
    var currentCount = 0
    var currentElement = -1

    for (element in arr){
        if (element == currentElement){
            currentCount++
        } else {
            maxCount = maxOf(maxCount, currentCount)
            currentElement = element
            currentCount = 1
        }
    }
    maxCount = maxOf(maxCount, currentCount)

    return maxCount
}

fun main(){
    val arr = intArrayOf(1,1,1,2,2,3,3,3,3,4)
    println("Максимальная последовательность: ${maxSequence(arr)}")
}




28. Ввод и вывод массива:


fun main() {
    print("Введите размер массива: ")
    val size = readLine()?.toIntOrNull() ?: 0
    val arr = IntArray(size)

>  - Нейросеть:
for (i in 0 until size) {
        print("Введите элемент ${i + 1}: ")
        arr[i] = readLine()?.toIntOrNull() ?: 0
    }
    println("Массив: ${arr.contentToString()}")
}



29. Нахождение медианы:


fun findMedian(arr: IntArray): Double {
    val sorted = arr.sorted()
    val mid = sorted.size / 2
    return if (sorted.size % 2 == 0) (sorted[mid - 1] + sorted[mid]).toDouble() / 2 else sorted[mid].toDouble()
}

fun main() {
    val arr = intArrayOf(1, 3, 5, 2, 4)
    println("Медиана: ${findMedian(arr)}")
}



30. Распределение по группам:


fun main() {
    val numbers = IntArray(100) { Random.nextInt(1, 101) }
    numbers.chunked(10).forEachIndexed { index, group ->
        println("Группа ${index + 1}: ${group.contentToString()}")
    }
}





